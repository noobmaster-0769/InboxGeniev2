# Postgres
POSTGRES_USER=postgres
POSTGRES_PASSWORD=password
POSTGRES_DB=inboxgenie
POSTGRES_HOST=db
POSTGRES_PORT=5432

# Fernet key (generate with: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())")
FERNET_KEY=REPLACE_WITH_FERNET_KEY

# Google OAuth credentials
GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your-google-client-secret
GOOGLE_REDIRECT_URI=http://localhost:8000/auth/google/callback

# AI provider (set to 'openai' + API key to use OpenAI; otherwise 'mock')
AI_PROVIDER=mock
AI_API_KEY=

# Celery / Redis
CELERY_BROKER_URL=redis://redis:6379/0
CELERY_RESULT_BACKEND=redis://redis:6379/0

# backend/.env

# Database - These should match the 'db' service in docker-compose.yml
POSTGRES_USER=postgres
POSTGRES_PASSWORD=password
POSTGRES_DB=inboxgenie
POSTGRES_HOST=db  # <-- This now correctly points to the 'db' service
POSTGRES_PORT=5432

# Celery / Redis
CELERY_BROKER_URL=redis://redis:6379/0
CELERY_RESULT_BACKEND=redis://redis:6379/0

# Google OAuth Credentials
GOOGLE_CLIENT_ID="YOUR_GOOGLE_CLIENT_ID"
GOOGLE_CLIENT_SECRET="YOUR_GOOGLE_CLIENT_SECRET"
GOOGLE_REDIRECT_URI="http://localhost:8000/auth/google/callback"

# OpenAI Credentials
AI_PROVIDER=openai
AI_API_KEY="YOUR_OPENAI_API_KEY"

# Fernet Key for Encryption
FERNET_KEY="" 
# You can generate a new one by running: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"